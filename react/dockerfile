# Use the official Node.js image with version 20.12.2 as the base image
FROM node:20.12.2-alpine

# Set the working directory
WORKDIR /app

# Copy package.json and package-lock.json files
COPY package.json package-lock.json ./

# Install Node.js dependencies
RUN npm install

# Copy the rest of the application code
COPY . .

# Copy the fetch_secret.sh script
COPY fetch_secret.sh .

# Make the fetch_secret.sh script executable
RUN chmod +x fetch_secret.sh

# Install Python and necessary dependencies
RUN apk add --no-cache python3 py3-pip gcc musl-dev libffi-dev curl bash

# Download and install Google Cloud SDK
RUN curl -O https://dl.google.com/dl/cloudsdk/channels/rapid/downloads/google-cloud-sdk-433.0.1-linux-x86_64.tar.gz \
    && tar zxvf google-cloud-sdk-433.0.1-linux-x86_64.tar.gz \
    && ./google-cloud-sdk/install.sh --quiet \
    && rm google-cloud-sdk-433.0.1-linux-x86_64.tar.gz

# Initialize Google Cloud SDK
ENV PATH $PATH:/app/google-cloud-sdk/bin

# Set environment variables for fetching the secret
ENV PROJECT_NUMBER="580004149041"
ENV SECRET_ID="multiple_sigeti-bq-para-run"
ENV DESTINATION_FILE="/app/service-account.json"

# Ensure the GOOGLE_APPLICATION_CREDENTIALS_JSON environment variable is set
ARG GOOGLE_APPLICATION_CREDENTIALS_JSON

# Fetch the service account key from Secret Manager and save it to the correct location
RUN ./fetch_secret.sh

# Set environment variables for the service account key
ENV GOOGLE_APPLICATION_CREDENTIALS="/app/service-account.json"

# Build the Next.js application
RUN npm run build

# Expose the port Next.js will run on
EXPOSE 3000

# Start the Next.js application
CMD ["npm", "start"]
